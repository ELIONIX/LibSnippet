<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>disposablebor</Title>
      <Shortcut>disposablebor</Shortcut>
      <Description>DisposableBaseのDisposeManagedResources関数とDisposeUnmanagedResourcesのoverride定義を生成する。</Description>
      <Author>SAITO Takamasa</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>author</ID>
          <ToolTip>作成者の名前</ToolTip>
          <Default>ELIONIX</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[//------------------------------------------------------------------------------------//
		/// <summary>
		/// マネージドリソースを破棄する
		/// </summary>
		/// <remarks>
		/// Disposableな内部オブジェクトはこっちの関数で解放する。
		/// また、この関数をoverrideする時、
		/// 抽象でない基底クラスの同関数を必ず呼ぶようにすること。
		/// </remarks>
		//! @author $author$
		//------------------------------------------------------------------------------------//
		protected override void DisposeManagedResources()
		{
			//何も無し
		}

		//------------------------------------------------------------------------------------//
		/// <summary>
		/// アンマネージドリソースを破棄する
		/// </summary>
		/// <remarks>
		/// 通常こちらの関数で解放するべきリソースは殆ど無い。
		/// ファイルやウィンドウなどでも、Manageクラスでラップされていれば
		/// ManagedResourceとして処理する（Disposeを呼ぶ）。
		/// ここに書くのは、Win32 APIを直接呼んで取得したハンドル（IntPtr）等を
		/// CloseHandleする必要があるような場合である。
		/// また、この関数をoverrideする時、
		/// 抽象でない基底クラスの同関数を必ず呼ぶようにすること。
		/// </remarks>
		//! @author $author$
		//------------------------------------------------------------------------------------//
		protected override void DisposeUnmanagedResources()
		{
			//何も無し
		}
		$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>